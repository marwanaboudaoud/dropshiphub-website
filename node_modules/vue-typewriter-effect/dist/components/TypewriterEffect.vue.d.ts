declare const _sfc_main: import("vue").DefineComponent<{
    element: {
        type: StringConstructor;
        default: string;
    };
    strings: {
        type: ArrayConstructor;
        default: () => string[];
    };
    cursor: {
        type: StringConstructor;
        default: string;
    };
    delay: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    deleteSpeed: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    loop: {
        type: BooleanConstructor;
        default: boolean;
    };
    autoStart: {
        type: BooleanConstructor;
        default: boolean;
    };
    pauseFor: {
        type: NumberConstructor;
        default: number;
    };
    devMode: {
        type: BooleanConstructor;
        default: boolean;
    };
    skipAddStyles: {
        type: BooleanConstructor;
        default: boolean;
    };
    wrapperClassName: {
        type: StringConstructor;
        default: string;
    };
    cursorClassName: {
        type: StringConstructor;
        default: string;
    };
    stringSplitter: {
        type: FunctionConstructor;
        default: (str: string) => string[];
    };
    onCreateTextNode: {
        type: FunctionConstructor;
        default: null;
    };
    onRemoveNode: {
        type: FunctionConstructor;
        default: null;
    };
}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    element: {
        type: StringConstructor;
        default: string;
    };
    strings: {
        type: ArrayConstructor;
        default: () => string[];
    };
    cursor: {
        type: StringConstructor;
        default: string;
    };
    delay: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    deleteSpeed: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    loop: {
        type: BooleanConstructor;
        default: boolean;
    };
    autoStart: {
        type: BooleanConstructor;
        default: boolean;
    };
    pauseFor: {
        type: NumberConstructor;
        default: number;
    };
    devMode: {
        type: BooleanConstructor;
        default: boolean;
    };
    skipAddStyles: {
        type: BooleanConstructor;
        default: boolean;
    };
    wrapperClassName: {
        type: StringConstructor;
        default: string;
    };
    cursorClassName: {
        type: StringConstructor;
        default: string;
    };
    stringSplitter: {
        type: FunctionConstructor;
        default: (str: string) => string[];
    };
    onCreateTextNode: {
        type: FunctionConstructor;
        default: null;
    };
    onRemoveNode: {
        type: FunctionConstructor;
        default: null;
    };
}>>, {
    element: string;
    strings: unknown[];
    cursor: string;
    delay: string | number;
    deleteSpeed: string | number;
    loop: boolean;
    autoStart: boolean;
    pauseFor: number;
    devMode: boolean;
    skipAddStyles: boolean;
    wrapperClassName: string;
    cursorClassName: string;
    stringSplitter: Function;
    onCreateTextNode: Function;
    onRemoveNode: Function;
}>;
export default _sfc_main;
